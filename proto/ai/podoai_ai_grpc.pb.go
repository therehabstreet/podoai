// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: ai/podoai_ai.proto

package ai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIAnalysisService_AnalyzeScan_FullMethodName       = "/podoai.ai.AIAnalysisService/AnalyzeScan"
	AIAnalysisService_GenerateLLMReport_FullMethodName = "/podoai.ai.AIAnalysisService/GenerateLLMReport"
)

// AIAnalysisServiceClient is the client API for AIAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIAnalysisServiceClient interface {
	AnalyzeScan(ctx context.Context, in *AnalyzeScanRequest, opts ...grpc.CallOption) (*AnalyzeScanResponse, error)
	GenerateLLMReport(ctx context.Context, in *GenerateLLMReportRequest, opts ...grpc.CallOption) (*GenerateLLMReportResponse, error)
}

type aIAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIAnalysisServiceClient(cc grpc.ClientConnInterface) AIAnalysisServiceClient {
	return &aIAnalysisServiceClient{cc}
}

func (c *aIAnalysisServiceClient) AnalyzeScan(ctx context.Context, in *AnalyzeScanRequest, opts ...grpc.CallOption) (*AnalyzeScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeScanResponse)
	err := c.cc.Invoke(ctx, AIAnalysisService_AnalyzeScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAnalysisServiceClient) GenerateLLMReport(ctx context.Context, in *GenerateLLMReportRequest, opts ...grpc.CallOption) (*GenerateLLMReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateLLMReportResponse)
	err := c.cc.Invoke(ctx, AIAnalysisService_GenerateLLMReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIAnalysisServiceServer is the server API for AIAnalysisService service.
// All implementations must embed UnimplementedAIAnalysisServiceServer
// for forward compatibility.
type AIAnalysisServiceServer interface {
	AnalyzeScan(context.Context, *AnalyzeScanRequest) (*AnalyzeScanResponse, error)
	GenerateLLMReport(context.Context, *GenerateLLMReportRequest) (*GenerateLLMReportResponse, error)
	mustEmbedUnimplementedAIAnalysisServiceServer()
}

// UnimplementedAIAnalysisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIAnalysisServiceServer struct{}

func (UnimplementedAIAnalysisServiceServer) AnalyzeScan(context.Context, *AnalyzeScanRequest) (*AnalyzeScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeScan not implemented")
}
func (UnimplementedAIAnalysisServiceServer) GenerateLLMReport(context.Context, *GenerateLLMReportRequest) (*GenerateLLMReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLLMReport not implemented")
}
func (UnimplementedAIAnalysisServiceServer) mustEmbedUnimplementedAIAnalysisServiceServer() {}
func (UnimplementedAIAnalysisServiceServer) testEmbeddedByValue()                           {}

// UnsafeAIAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIAnalysisServiceServer will
// result in compilation errors.
type UnsafeAIAnalysisServiceServer interface {
	mustEmbedUnimplementedAIAnalysisServiceServer()
}

func RegisterAIAnalysisServiceServer(s grpc.ServiceRegistrar, srv AIAnalysisServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIAnalysisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIAnalysisService_ServiceDesc, srv)
}

func _AIAnalysisService_AnalyzeScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAnalysisServiceServer).AnalyzeScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAnalysisService_AnalyzeScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAnalysisServiceServer).AnalyzeScan(ctx, req.(*AnalyzeScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAnalysisService_GenerateLLMReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateLLMReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAnalysisServiceServer).GenerateLLMReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAnalysisService_GenerateLLMReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAnalysisServiceServer).GenerateLLMReport(ctx, req.(*GenerateLLMReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIAnalysisService_ServiceDesc is the grpc.ServiceDesc for AIAnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIAnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podoai.ai.AIAnalysisService",
	HandlerType: (*AIAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeScan",
			Handler:    _AIAnalysisService_AnalyzeScan_Handler,
		},
		{
			MethodName: "GenerateLLMReport",
			Handler:    _AIAnalysisService_GenerateLLMReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai/podoai_ai.proto",
}
