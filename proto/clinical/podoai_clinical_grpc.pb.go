// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: clinical/podoai_clinical.proto

package clinical

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClinicalService_GetClinic_FullMethodName        = "/podoai_clinical.ClinicalService/GetClinic"
	ClinicalService_CreateClinicUser_FullMethodName = "/podoai_clinical.ClinicalService/CreateClinicUser"
	ClinicalService_GetClinicUser_FullMethodName    = "/podoai_clinical.ClinicalService/GetClinicUser"
	ClinicalService_UpdateClinicUser_FullMethodName = "/podoai_clinical.ClinicalService/UpdateClinicUser"
	ClinicalService_DeleteClinicUser_FullMethodName = "/podoai_clinical.ClinicalService/DeleteClinicUser"
	ClinicalService_ListClinicUsers_FullMethodName  = "/podoai_clinical.ClinicalService/ListClinicUsers"
)

// ClinicalServiceClient is the client API for ClinicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Clinical service definitions go here
type ClinicalServiceClient interface {
	// Clinic APIs
	GetClinic(ctx context.Context, in *GetClinicRequest, opts ...grpc.CallOption) (*GetClinicResponse, error)
	// ClinicUser CRUDL APIs
	CreateClinicUser(ctx context.Context, in *CreateClinicUserRequest, opts ...grpc.CallOption) (*CreateClinicUserResponse, error)
	GetClinicUser(ctx context.Context, in *GetClinicUserRequest, opts ...grpc.CallOption) (*GetClinicUserResponse, error)
	UpdateClinicUser(ctx context.Context, in *UpdateClinicUserRequest, opts ...grpc.CallOption) (*UpdateClinicUserResponse, error)
	DeleteClinicUser(ctx context.Context, in *DeleteClinicUserRequest, opts ...grpc.CallOption) (*DeleteClinicUserResponse, error)
	ListClinicUsers(ctx context.Context, in *ListClinicUsersRequest, opts ...grpc.CallOption) (*ListClinicUsersResponse, error)
}

type clinicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClinicalServiceClient(cc grpc.ClientConnInterface) ClinicalServiceClient {
	return &clinicalServiceClient{cc}
}

func (c *clinicalServiceClient) GetClinic(ctx context.Context, in *GetClinicRequest, opts ...grpc.CallOption) (*GetClinicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClinicResponse)
	err := c.cc.Invoke(ctx, ClinicalService_GetClinic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicalServiceClient) CreateClinicUser(ctx context.Context, in *CreateClinicUserRequest, opts ...grpc.CallOption) (*CreateClinicUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateClinicUserResponse)
	err := c.cc.Invoke(ctx, ClinicalService_CreateClinicUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicalServiceClient) GetClinicUser(ctx context.Context, in *GetClinicUserRequest, opts ...grpc.CallOption) (*GetClinicUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClinicUserResponse)
	err := c.cc.Invoke(ctx, ClinicalService_GetClinicUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicalServiceClient) UpdateClinicUser(ctx context.Context, in *UpdateClinicUserRequest, opts ...grpc.CallOption) (*UpdateClinicUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClinicUserResponse)
	err := c.cc.Invoke(ctx, ClinicalService_UpdateClinicUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicalServiceClient) DeleteClinicUser(ctx context.Context, in *DeleteClinicUserRequest, opts ...grpc.CallOption) (*DeleteClinicUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClinicUserResponse)
	err := c.cc.Invoke(ctx, ClinicalService_DeleteClinicUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinicalServiceClient) ListClinicUsers(ctx context.Context, in *ListClinicUsersRequest, opts ...grpc.CallOption) (*ListClinicUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClinicUsersResponse)
	err := c.cc.Invoke(ctx, ClinicalService_ListClinicUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClinicalServiceServer is the server API for ClinicalService service.
// All implementations must embed UnimplementedClinicalServiceServer
// for forward compatibility.
//
// Clinical service definitions go here
type ClinicalServiceServer interface {
	// Clinic APIs
	GetClinic(context.Context, *GetClinicRequest) (*GetClinicResponse, error)
	// ClinicUser CRUDL APIs
	CreateClinicUser(context.Context, *CreateClinicUserRequest) (*CreateClinicUserResponse, error)
	GetClinicUser(context.Context, *GetClinicUserRequest) (*GetClinicUserResponse, error)
	UpdateClinicUser(context.Context, *UpdateClinicUserRequest) (*UpdateClinicUserResponse, error)
	DeleteClinicUser(context.Context, *DeleteClinicUserRequest) (*DeleteClinicUserResponse, error)
	ListClinicUsers(context.Context, *ListClinicUsersRequest) (*ListClinicUsersResponse, error)
	mustEmbedUnimplementedClinicalServiceServer()
}

// UnimplementedClinicalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClinicalServiceServer struct{}

func (UnimplementedClinicalServiceServer) GetClinic(context.Context, *GetClinicRequest) (*GetClinicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClinic not implemented")
}
func (UnimplementedClinicalServiceServer) CreateClinicUser(context.Context, *CreateClinicUserRequest) (*CreateClinicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClinicUser not implemented")
}
func (UnimplementedClinicalServiceServer) GetClinicUser(context.Context, *GetClinicUserRequest) (*GetClinicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClinicUser not implemented")
}
func (UnimplementedClinicalServiceServer) UpdateClinicUser(context.Context, *UpdateClinicUserRequest) (*UpdateClinicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClinicUser not implemented")
}
func (UnimplementedClinicalServiceServer) DeleteClinicUser(context.Context, *DeleteClinicUserRequest) (*DeleteClinicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClinicUser not implemented")
}
func (UnimplementedClinicalServiceServer) ListClinicUsers(context.Context, *ListClinicUsersRequest) (*ListClinicUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClinicUsers not implemented")
}
func (UnimplementedClinicalServiceServer) mustEmbedUnimplementedClinicalServiceServer() {}
func (UnimplementedClinicalServiceServer) testEmbeddedByValue()                         {}

// UnsafeClinicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClinicalServiceServer will
// result in compilation errors.
type UnsafeClinicalServiceServer interface {
	mustEmbedUnimplementedClinicalServiceServer()
}

func RegisterClinicalServiceServer(s grpc.ServiceRegistrar, srv ClinicalServiceServer) {
	// If the following call pancis, it indicates UnimplementedClinicalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClinicalService_ServiceDesc, srv)
}

func _ClinicalService_GetClinic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClinicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicalServiceServer).GetClinic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicalService_GetClinic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicalServiceServer).GetClinic(ctx, req.(*GetClinicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicalService_CreateClinicUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClinicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicalServiceServer).CreateClinicUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicalService_CreateClinicUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicalServiceServer).CreateClinicUser(ctx, req.(*CreateClinicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicalService_GetClinicUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClinicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicalServiceServer).GetClinicUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicalService_GetClinicUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicalServiceServer).GetClinicUser(ctx, req.(*GetClinicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicalService_UpdateClinicUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClinicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicalServiceServer).UpdateClinicUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicalService_UpdateClinicUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicalServiceServer).UpdateClinicUser(ctx, req.(*UpdateClinicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicalService_DeleteClinicUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClinicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicalServiceServer).DeleteClinicUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicalService_DeleteClinicUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicalServiceServer).DeleteClinicUser(ctx, req.(*DeleteClinicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClinicalService_ListClinicUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClinicUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinicalServiceServer).ListClinicUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClinicalService_ListClinicUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinicalServiceServer).ListClinicUsers(ctx, req.(*ListClinicUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClinicalService_ServiceDesc is the grpc.ServiceDesc for ClinicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClinicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podoai_clinical.ClinicalService",
	HandlerType: (*ClinicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClinic",
			Handler:    _ClinicalService_GetClinic_Handler,
		},
		{
			MethodName: "CreateClinicUser",
			Handler:    _ClinicalService_CreateClinicUser_Handler,
		},
		{
			MethodName: "GetClinicUser",
			Handler:    _ClinicalService_GetClinicUser_Handler,
		},
		{
			MethodName: "UpdateClinicUser",
			Handler:    _ClinicalService_UpdateClinicUser_Handler,
		},
		{
			MethodName: "DeleteClinicUser",
			Handler:    _ClinicalService_DeleteClinicUser_Handler,
		},
		{
			MethodName: "ListClinicUsers",
			Handler:    _ClinicalService_ListClinicUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clinical/podoai_clinical.proto",
}
