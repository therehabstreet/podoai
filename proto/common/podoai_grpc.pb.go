// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: common/podoai.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommonService_RequestOtp_FullMethodName    = "/podoai.CommonService/RequestOtp"
	CommonService_VerifyOtp_FullMethodName     = "/podoai.CommonService/VerifyOtp"
	CommonService_GetScans_FullMethodName      = "/podoai.CommonService/GetScans"
	CommonService_GetScan_FullMethodName       = "/podoai.CommonService/GetScan"
	CommonService_CreateScan_FullMethodName    = "/podoai.CommonService/CreateScan"
	CommonService_UpdateScan_FullMethodName    = "/podoai.CommonService/UpdateScan"
	CommonService_DeleteScan_FullMethodName    = "/podoai.CommonService/DeleteScan"
	CommonService_GetProduct_FullMethodName    = "/podoai.CommonService/GetProduct"
	CommonService_GetExercise_FullMethodName   = "/podoai.CommonService/GetExercise"
	CommonService_GetTherapy_FullMethodName    = "/podoai.CommonService/GetTherapy"
	CommonService_GetPatients_FullMethodName   = "/podoai.CommonService/GetPatients"
	CommonService_GetPatient_FullMethodName    = "/podoai.CommonService/GetPatient"
	CommonService_SearchPatient_FullMethodName = "/podoai.CommonService/SearchPatient"
	CommonService_CreatePatient_FullMethodName = "/podoai.CommonService/CreatePatient"
	CommonService_DeletePatient_FullMethodName = "/podoai.CommonService/DeletePatient"
)

// CommonServiceClient is the client API for CommonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonServiceClient interface {
	// Authentication RPCs
	RequestOtp(ctx context.Context, in *RequestOtpRequest, opts ...grpc.CallOption) (*RequestOtpResponse, error)
	VerifyOtp(ctx context.Context, in *VerifyOtpRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Scan and related RPCs
	GetScans(ctx context.Context, in *GetScansRequest, opts ...grpc.CallOption) (*GetScansResponse, error)
	GetScan(ctx context.Context, in *GetScanRequest, opts ...grpc.CallOption) (*GetScanResponse, error)
	CreateScan(ctx context.Context, in *CreateScanRequest, opts ...grpc.CallOption) (*CreateScanResponse, error)
	UpdateScan(ctx context.Context, in *UpdateScanRequest, opts ...grpc.CallOption) (*UpdateScanResponse, error)
	DeleteScan(ctx context.Context, in *DeleteScanRequest, opts ...grpc.CallOption) (*DeleteScanResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error)
	GetTherapy(ctx context.Context, in *GetTherapyRequest, opts ...grpc.CallOption) (*GetTherapyResponse, error)
	// Patient RPCs
	GetPatients(ctx context.Context, in *GetPatientsRequest, opts ...grpc.CallOption) (*GetPatientsResponse, error)
	GetPatient(ctx context.Context, in *GetPatientRequest, opts ...grpc.CallOption) (*GetPatientResponse, error)
	SearchPatient(ctx context.Context, in *SearchPatientRequest, opts ...grpc.CallOption) (*SearchPatientResponse, error)
	CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*CreatePatientResponse, error)
	DeletePatient(ctx context.Context, in *DeletePatientRequest, opts ...grpc.CallOption) (*DeletePatientResponse, error)
}

type commonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonServiceClient(cc grpc.ClientConnInterface) CommonServiceClient {
	return &commonServiceClient{cc}
}

func (c *commonServiceClient) RequestOtp(ctx context.Context, in *RequestOtpRequest, opts ...grpc.CallOption) (*RequestOtpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestOtpResponse)
	err := c.cc.Invoke(ctx, CommonService_RequestOtp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) VerifyOtp(ctx context.Context, in *VerifyOtpRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, CommonService_VerifyOtp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetScans(ctx context.Context, in *GetScansRequest, opts ...grpc.CallOption) (*GetScansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScansResponse)
	err := c.cc.Invoke(ctx, CommonService_GetScans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetScan(ctx context.Context, in *GetScanRequest, opts ...grpc.CallOption) (*GetScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScanResponse)
	err := c.cc.Invoke(ctx, CommonService_GetScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) CreateScan(ctx context.Context, in *CreateScanRequest, opts ...grpc.CallOption) (*CreateScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScanResponse)
	err := c.cc.Invoke(ctx, CommonService_CreateScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) UpdateScan(ctx context.Context, in *UpdateScanRequest, opts ...grpc.CallOption) (*UpdateScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScanResponse)
	err := c.cc.Invoke(ctx, CommonService_UpdateScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) DeleteScan(ctx context.Context, in *DeleteScanRequest, opts ...grpc.CallOption) (*DeleteScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScanResponse)
	err := c.cc.Invoke(ctx, CommonService_DeleteScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, CommonService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExerciseResponse)
	err := c.cc.Invoke(ctx, CommonService_GetExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetTherapy(ctx context.Context, in *GetTherapyRequest, opts ...grpc.CallOption) (*GetTherapyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTherapyResponse)
	err := c.cc.Invoke(ctx, CommonService_GetTherapy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetPatients(ctx context.Context, in *GetPatientsRequest, opts ...grpc.CallOption) (*GetPatientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientsResponse)
	err := c.cc.Invoke(ctx, CommonService_GetPatients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) GetPatient(ctx context.Context, in *GetPatientRequest, opts ...grpc.CallOption) (*GetPatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientResponse)
	err := c.cc.Invoke(ctx, CommonService_GetPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) SearchPatient(ctx context.Context, in *SearchPatientRequest, opts ...grpc.CallOption) (*SearchPatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPatientResponse)
	err := c.cc.Invoke(ctx, CommonService_SearchPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*CreatePatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePatientResponse)
	err := c.cc.Invoke(ctx, CommonService_CreatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) DeletePatient(ctx context.Context, in *DeletePatientRequest, opts ...grpc.CallOption) (*DeletePatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePatientResponse)
	err := c.cc.Invoke(ctx, CommonService_DeletePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonServiceServer is the server API for CommonService service.
// All implementations must embed UnimplementedCommonServiceServer
// for forward compatibility.
type CommonServiceServer interface {
	// Authentication RPCs
	RequestOtp(context.Context, *RequestOtpRequest) (*RequestOtpResponse, error)
	VerifyOtp(context.Context, *VerifyOtpRequest) (*LoginResponse, error)
	// Scan and related RPCs
	GetScans(context.Context, *GetScansRequest) (*GetScansResponse, error)
	GetScan(context.Context, *GetScanRequest) (*GetScanResponse, error)
	CreateScan(context.Context, *CreateScanRequest) (*CreateScanResponse, error)
	UpdateScan(context.Context, *UpdateScanRequest) (*UpdateScanResponse, error)
	DeleteScan(context.Context, *DeleteScanRequest) (*DeleteScanResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	GetExercise(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error)
	GetTherapy(context.Context, *GetTherapyRequest) (*GetTherapyResponse, error)
	// Patient RPCs
	GetPatients(context.Context, *GetPatientsRequest) (*GetPatientsResponse, error)
	GetPatient(context.Context, *GetPatientRequest) (*GetPatientResponse, error)
	SearchPatient(context.Context, *SearchPatientRequest) (*SearchPatientResponse, error)
	CreatePatient(context.Context, *CreatePatientRequest) (*CreatePatientResponse, error)
	DeletePatient(context.Context, *DeletePatientRequest) (*DeletePatientResponse, error)
	mustEmbedUnimplementedCommonServiceServer()
}

// UnimplementedCommonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommonServiceServer struct{}

func (UnimplementedCommonServiceServer) RequestOtp(context.Context, *RequestOtpRequest) (*RequestOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOtp not implemented")
}
func (UnimplementedCommonServiceServer) VerifyOtp(context.Context, *VerifyOtpRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtp not implemented")
}
func (UnimplementedCommonServiceServer) GetScans(context.Context, *GetScansRequest) (*GetScansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScans not implemented")
}
func (UnimplementedCommonServiceServer) GetScan(context.Context, *GetScanRequest) (*GetScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScan not implemented")
}
func (UnimplementedCommonServiceServer) CreateScan(context.Context, *CreateScanRequest) (*CreateScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScan not implemented")
}
func (UnimplementedCommonServiceServer) UpdateScan(context.Context, *UpdateScanRequest) (*UpdateScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScan not implemented")
}
func (UnimplementedCommonServiceServer) DeleteScan(context.Context, *DeleteScanRequest) (*DeleteScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScan not implemented")
}
func (UnimplementedCommonServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedCommonServiceServer) GetExercise(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
}
func (UnimplementedCommonServiceServer) GetTherapy(context.Context, *GetTherapyRequest) (*GetTherapyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTherapy not implemented")
}
func (UnimplementedCommonServiceServer) GetPatients(context.Context, *GetPatientsRequest) (*GetPatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (UnimplementedCommonServiceServer) GetPatient(context.Context, *GetPatientRequest) (*GetPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatient not implemented")
}
func (UnimplementedCommonServiceServer) SearchPatient(context.Context, *SearchPatientRequest) (*SearchPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPatient not implemented")
}
func (UnimplementedCommonServiceServer) CreatePatient(context.Context, *CreatePatientRequest) (*CreatePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedCommonServiceServer) DeletePatient(context.Context, *DeletePatientRequest) (*DeletePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}
func (UnimplementedCommonServiceServer) mustEmbedUnimplementedCommonServiceServer() {}
func (UnimplementedCommonServiceServer) testEmbeddedByValue()                       {}

// UnsafeCommonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonServiceServer will
// result in compilation errors.
type UnsafeCommonServiceServer interface {
	mustEmbedUnimplementedCommonServiceServer()
}

func RegisterCommonServiceServer(s grpc.ServiceRegistrar, srv CommonServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommonService_ServiceDesc, srv)
}

func _CommonService_RequestOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).RequestOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_RequestOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).RequestOtp(ctx, req.(*RequestOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_VerifyOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).VerifyOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_VerifyOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).VerifyOtp(ctx, req.(*VerifyOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetScans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetScans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_GetScans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetScans(ctx, req.(*GetScansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_GetScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetScan(ctx, req.(*GetScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_CreateScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).CreateScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_CreateScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).CreateScan(ctx, req.(*CreateScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_UpdateScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).UpdateScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_UpdateScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).UpdateScan(ctx, req.(*UpdateScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_DeleteScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).DeleteScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_DeleteScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).DeleteScan(ctx, req.(*DeleteScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_GetExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetExercise(ctx, req.(*GetExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetTherapy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTherapyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetTherapy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_GetTherapy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetTherapy(ctx, req.(*GetTherapyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_GetPatients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetPatients(ctx, req.(*GetPatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_GetPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_GetPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetPatient(ctx, req.(*GetPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_SearchPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).SearchPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_SearchPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).SearchPatient(ctx, req.(*SearchPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_CreatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).CreatePatient(ctx, req.(*CreatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonService_DeletePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).DeletePatient(ctx, req.(*DeletePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonService_ServiceDesc is the grpc.ServiceDesc for CommonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podoai.CommonService",
	HandlerType: (*CommonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestOtp",
			Handler:    _CommonService_RequestOtp_Handler,
		},
		{
			MethodName: "VerifyOtp",
			Handler:    _CommonService_VerifyOtp_Handler,
		},
		{
			MethodName: "GetScans",
			Handler:    _CommonService_GetScans_Handler,
		},
		{
			MethodName: "GetScan",
			Handler:    _CommonService_GetScan_Handler,
		},
		{
			MethodName: "CreateScan",
			Handler:    _CommonService_CreateScan_Handler,
		},
		{
			MethodName: "UpdateScan",
			Handler:    _CommonService_UpdateScan_Handler,
		},
		{
			MethodName: "DeleteScan",
			Handler:    _CommonService_DeleteScan_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _CommonService_GetProduct_Handler,
		},
		{
			MethodName: "GetExercise",
			Handler:    _CommonService_GetExercise_Handler,
		},
		{
			MethodName: "GetTherapy",
			Handler:    _CommonService_GetTherapy_Handler,
		},
		{
			MethodName: "GetPatients",
			Handler:    _CommonService_GetPatients_Handler,
		},
		{
			MethodName: "GetPatient",
			Handler:    _CommonService_GetPatient_Handler,
		},
		{
			MethodName: "SearchPatient",
			Handler:    _CommonService_SearchPatient_Handler,
		},
		{
			MethodName: "CreatePatient",
			Handler:    _CommonService_CreatePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _CommonService_DeletePatient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/podoai.proto",
}
